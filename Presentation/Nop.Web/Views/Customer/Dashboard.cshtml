@model CustomerDashboardDetailsModel

    @using Nop.Web.Models.Customer;
    @using Nop.Core;
    @{
        Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

        //title
        Html.AddTitleParts("My Account-My Meters");
        //page class
        Html.AppendPageCssClassParts("html-account-page");
        Html.AppendPageCssClassParts("html-customer-info-page");
        Html.AppendScriptParts("~/Administration/Scripts/chartjs/Chart.min.js");
        Html.AppendCssFileParts("~/Administration/Content/bootstrap/css/bootstrap.min.css");
        Html.AppendCssFileParts("~/Administration/Content/adminLTE/AdminLTE-2.3.0.min.css");
        Html.AppendScriptParts("~/Administration/Scripts/bootstrap/bootstrap.min.js");
        const string prefix = "order-statistics";
        const string prefix1 = "bill-statistics";
        const string hidePanelAttributeName = "HideOrderStatisticsPanel";
        var hidePanel = false;
    }
    @section left
{
        @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
    }
    <div class="page account-page customer-info-page">
        <div class="page-title">
            <h1>Dashboard</h1>
        </div>
        <div class="page-body">

            @{if (Model.Meters.Count > 0)
            {
                foreach (var item in Model.Meters)
                {
                    <div class="row">
                        <h2>Statistics for Meter Id @item.MeterId</h2>
                        <div class="col-md-6 col-sm-12">

                            <div class="box box-info @if (hidePanel){<text>collapsed-box</text>}" id="@(item.MeterId)-box">
                                <div class="box-header with-border row">

                                    <h3 class="box-title">
                                        <i class="fa fa-shopping-cart"></i>
                                        Consumption Statistics
                                    </h3>
                                    <div class="box-tools pull-right">


                                        
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)" @if (hidePanel) { <text> disabled="disabled" </text>                } data-chart-role="toggle-chart" data-chart-period="year">@T("Admin.SalesReport.OrderStatistics.Year")</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="month">@T("Admin.SalesReport.OrderStatistics.Month")</button>
                                        <button class="btn btn-xs btn-info btn-flat" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="week">@T("Admin.SalesReport.OrderStatistics.Week")</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)"  @if (hidePanel) { <text> disabled="disabled" </text>               } data-chart-role="toggle-chart" data-chart-period="day">Day</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)"  @if (hidePanel) { <text> disabled="disabled" </text>               } data-chart-role="toggle-chart" data-chart-period="60">Hour</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)"  @if (hidePanel) { <text> disabled="disabled" </text>                } data-chart-role="toggle-chart" data-chart-period="15">30 min.</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" data-device-id="@(item.DeviceId)" data-meter-id="@(item.MeterId)"  @if (hidePanel) { <text> disabled="disabled" </text>                } data-chart-role="toggle-chart" data-chart-period="30">15 min.</button>
                                        <input id="@(item.MeterId)-datetimepicker" title="datetimepicker" style="width: 35%;" />
                                    </div>
                                </div>
                                <div class="box-body">
                                    <div class="chart" style="height: 300px;">
                                        <canvas id="@(item.MeterId)-chart" height="300"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">

                            <div class="box box-info @if (hidePanel){<text>collapsed-box</text>}" id="@(item.MeterId)-bill-box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">
                                        <i class="fa fa-shopping-cart"></i>
                                        Bill Statistics
                                    </h3>
                                    <br />
                                    <button style="display:none;" class="btn btn-xs btn-info btn-flat" @if (hidePanel) { <text> disabled="disabled" </text>            } data-chart-role="toggle-chart" data-chart-period="week">@T("Admin.SalesReport.OrderStatistics.Week")</button>
                                </div>
                                <div class="box-body">
                                    <div class="chart" style="height: 300px;">
                                        <canvas id="@(item.MeterId)-bill-chart" height="300"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <h2>You are not subscribed to any of the Meter</h2>
            }
            }
            <script>
                var calendar_value 
                var datepicker
                
                
    var item;
    var customer = '14'
    var month = new Array();
    month[0] = "January";
    month[1] = "February";
    month[2] = "March";
    month[3] = "April";
    month[4] = "May";
    month[5] = "June";
    month[6] = "July";
    month[7] = "August";
    month[8] = "September";
    month[9] = "October";
    month[10] = "November";
    month[11] = "December";
    var model = @Html.Raw(Json.Encode(Model.Meters))
    var bill = @Html.Raw(Json.Encode(Model.PreviousBills))
        $(document).ready(function(){
            model.forEach(function (item) {
                var today = new Date()
                $("#"+item.MeterId+"-datetimepicker").kendoDatePicker();
                // create Calendar from div HTML element
                $("#"+item.MeterId+"-datetimepicker").kendoDatePicker({
                    value: today,
                    max: today

                });
                window[item.MeterId+"datepicker"] = $("#"+item.MeterId+"-datetimepicker").data("kendoDatePicker");
                window[item.MeterId+"datepicker"].bind("change", function () {
                    var value = this.value();
                    window[item.MeterId+"datepicker"].value(value)
                    $('.bg-light-blue').trigger('click');
                });
            });
            model.forEach(function (item) {

                $('button[data-chart-role="toggle-chart"][data-chart-period="week"][data-meter-id="'+item.MeterId+'"]').trigger('click');
            })
        })
                    console.log(model)
                console.log(bill)
                model.forEach(function (item) {
                    
                    customer = item.CustomerId
                    window[item.MeterId+'billdata'] = $.grep(bill, function (element, index) {
                        return element.MeterId == item.MeterId;
                    });
                    window[item.MeterId] = {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [
                               
                            ]
                        },
                        options: {
                            legend: {
                                display: false
                            },
                            scales: {
                                xAxes: [{
                                    display: true,
                                    ticks: {
                                        userCallback: function (dataLabel, index) {
                                            if (window.orderStatistics && window.orderStatistics.config.data.labels.length > 12) {
                                                return index % 5 === 0 ? dataLabel : '';
                                            }
                                            return dataLabel;
                                        }
                                    }
                                }],
                                yAxes: [{
                                    display: true,
                                    ticks: {
                                        userCallback: function (dataLabel, index) {
                                            return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                        },
                                        min: 0
                                    }
                                }]
                            },
                            showScale: true,
                            scaleShowGridLines: false,
                            scaleGridLineColor: "rgba(0,0,0,.05)",
                            scaleGridLineWidth: 1,
                            scaleShowHorizontalLines: true,
                            scaleShowVerticalLines: true,
                            bezierCurve: true,
                            pointDot: false,
                            pointDotRadius: 4,
                            pointDotStrokeWidth: 1,
                            pointHitDetectionRadius: 20,
                            datasetStroke: true,
                            datasetFill: true,
                            maintainAspectRatio: false,
                            responsive: true
                        }
                    };
                    var lab = []
                    var dat =[]
                    window[item.MeterId+'billdata'].forEach(function(element){
                        date = eval(("new " + element.BillPeriodFrom).replace(/\//g,""))
                        lab.push(date.getFullYear()+", "+month[date.getMonth()])
                        dat.push(element.BillAmount)
                    })
                    window[item.MeterId + "bill"] = {
                        type: 'bar',
                        data: {
                            labels: lab,
                            datasets: [
                                {
                                    label: "bill",
                                    fillColor: "rgba(60,141,188,0.9)",
                                    strokeColor: "rgba(60,141,188,0.8)",
                                    pointColor: "#00a65a",
                                    pointStrokeColor: "rgba(0,166,90,1)",
                                    pointHighlightFill: "#fff",
                                    pointHighlightStroke: "rgba(0,166,90,1)",
                                    borderColor: 'rgba(0,166,90, 1)',
                                    backgroundColor: 'rgba(0,166,90,0.5)',
                                    pointBorderColor: 'rgba(0,166,90,0.7)',
                                    pointBackgroundColor: 'rgba(0,166,90,0.2)',
                                    pointBorderWidth: 1,
                                    data: dat
                                }
                            ]
                        },
                        options: {
                            legend: {
                                display: false
                            },
                            scales: {
                                xAxes: [{
                                    display: true,
                                    ticks: {
                                        userCallback: function (dataLabel, index) {
                                            if (window[item.MeterId+'bill'] && window[item.MeterId+'bill'].data.labels.length > 12) {
                                                return index % 5 === 0 ? dataLabel : '';
                                            }
                                            return dataLabel;
                                        }
                                    }
                                }],
                                yAxes: [{
                                    display: true,
                                    ticks: {
                                        userCallback: function (dataLabel, index) {
                                            return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                        },
                                        min: 0
                                    }
                                }]
                            },
                            showScale: true,
                            scaleShowGridLines: false,
                            scaleGridLineColor: "rgba(0,0,0,.05)",
                            scaleGridLineWidth: 1,
                            scaleShowHorizontalLines: true,
                            scaleShowVerticalLines: true,
                            bezierCurve: true,
                            pointDot: false,
                            pointDotRadius: 4,
                            pointDotStrokeWidth: 1,
                            pointHitDetectionRadius: 20,
                            datasetStroke: true,
                            datasetFill: true,
                            maintainAspectRatio: false,
                            responsive: true
                        },
                    }
                    new Chart(document.getElementById(item.MeterId+"-bill-chart").getContext("2d"), window[item.MeterId+"bill"])
                    window[item.MeterId+"graph"] = new Chart(document.getElementById(item.MeterId+"-chart").getContext("2d"), window[item.MeterId]);
                });
                function createDataset(osLabels_new, osData_new, label,MeterId) {

                    if (!window[MeterId+"graph"]) {
                        window[MeterId].data.labels = osLabels_new;
                        //osConfig.data.datasets.push(datasets);
                        var data_len =  window[MeterId].data.datasets.length
                        window[MeterId].data.datasets[data_len] = {
                            label: "XYZ",
                            fillColor: "rgba(60,141,188,0.9)",
                            strokeColor: "rgba(60,141,188,0.8)",
                            pointColor: "#3b8bba",
                            pointStrokeColor: "rgba(60,141,188,1)",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(60,141,188,1)",
                            borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                            pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                            pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                            pointBorderWidth: 1,
                            data: []
                        }
                        window[MeterId].data.datasets[data_len].label = label;
                        window[MeterId].data.datasets[data_len].data = osData_new;

                        window[MeterId].data.scales =
                        window[MeterId+"graph"] = new Chart(document.getElementById(id+"-chart").getContext("2d"), osConfig);
                    } else {

                        window[MeterId+"graph"].config.data.labels = osLabels_new;
                        //window.orderStatistics.config.data.datasets.push(datasets)
                        var data_len = window[MeterId+"graph"].config.data.datasets.length
                        window[MeterId+"graph"].config.data.datasets[data_len] = {
                            label: "XYZ",
                            fillColor: "rgba(60,141,188,0.9)",
                            strokeColor: "rgba(60,141,188,0.8)",
                            pointColor: "#3b8bba",
                            pointStrokeColor: "rgba(60,141,188,1)",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(60,141,188,1)",
                            borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                            pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                            pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                            pointBorderWidth: 1,
                            data: []
                        }
                        window[MeterId+"graph"].config.data.datasets[data_len].data = osData_new;
                        window[MeterId].data.datasets[data_len].label = label;
                        window[MeterId+"graph"].update();
                    }
                }
                function changeOsPeriod(period,id,deviceId) {

                    if (window[id+"graph"]) {
                        window[id+"graph"].config.data.datasets = [];
                    }

                    var osLabels = [];
                    var osData = [];
                    var data1 = {};
                    var data;
                    var deviceIdF =deviceId

                    data1.CustomerID = customer;
                    data1.TimeInterval = period;
                    data1.TimeIntervalDate = window[id+"datepicker"].value().toISOString();

                    $.ajax({
                        url: "/api/customer/graph",
                        type: 'POST',
                        headers: {
                            "content-type": "application/json",
                            "cache-control": "no-cache",
                        },
                        dataType: 'json',
                        data: JSON.stringify(data1),
                        success: function (result) {
                            data = result;
                            if (!data.length) {
                                alert("No data for the filter")
                                return false
                            }
                            var res = data.filter(function (v) {

                                return deviceIdF.indexOf(v.deviceId) > -1;
                            });
                            for (var i = 0; i < res.length; i++) {
                                osLabels = []
                                osData = []
                                cons = res[i].consumptionList;
                                solar = res[i].solarGeneratedUnitsList;
                                for (var j = 0; j < cons.length; j++) {
                                    var date = new Date(cons[j].loggingTime)
                                    switch (period) {
                                        case "year":
                                            osLabels.push(date.getFullYear());
                                            break;
                                        case "month":
                                            osLabels.push(month[date.getMonth()]);
                                            break;
                                        case "week":
                                            osLabels.push("Week:" + j + " " + month[date.getMonth()]);
                                            break;

                                        default:
                                            osLabels.push(date.getHours() + ":" + date.getMinutes());
                                    }

                                    osData.push(cons[j].consumption);

                                }
                                createDataset(osLabels, osData, "Meter",id);
                                osData = []
                                for (var k = 0; k < solar.length; k++) {
                                    var date = new Date(solar[k].loggingTime)
                                    osData.push(solar[k].solarGeneratedUnits);

                                }
                                createDataset(osLabels, osData, "Solar",id);

                            }


                        },
                        error: function (xhr, ajaxOptions, thrownError) {

                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });

                    return true
                }
                $('button[data-chart-role="toggle-chart"]').on('click', function () {
                    var period = $(this).attr('data-chart-period');
                    osCurrentPeriod = period;
                    changeOsPeriod(period,$(this).attr('data-meter-id'),$(this).attr('data-device-id'));
                    $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeClass('bg-light-blue');
                    $(this).addClass('bg-light-blue');
                });

            </script>

            @*<script>
                    $(document).ready(function () {
                        var osCurrentPeriod;
                        var data =
                            [{ "date": "29 Thursday", "value": "0" }, { "date": "30 Friday", "value": "0" }, { "date": "1 Saturday", "value": "0" }, { "date": "2 Sunday", "value": "0" }, { "date": "3 Monday", "value": "0" }, { "date": "4 Tuesday", "value": "6" }, { "date": "5 Wednesday", "value": "2" }, { "date": "6 Thursday", "value": "0" }]
                        var data1 =
                         [{ "date": "January", "value": "123" }, { "date": "February", "value": "100" },
                             { "date": "March", "value": "0" }, { "date": "April", "value": "0" },
                             { "date": "May", "value": "10" }, { "date": "June", "value": "6" },
                             { "date": "July", "value": "200" }, { "date": "August", "value": "0" }]

                        $('#@(prefix)-box').on('click', 'button[data-widget="collapse"]', function () {
                            var collapsed = !$('#@(prefix)-box').hasClass('collapsed-box');
                            if (!collapsed) {
                                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeAttr('disabled');
                                if (!osCurrentPeriod) {
                                    $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                                }
                            } else {
                                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').attr('disabled', 'disabled');
                            }
                        });

                        var osConfig = {
                            type: 'line',
                            data: {
                                labels: [],
                                datasets: [
                                    {
                                        label: "XYZ",
                                        fillColor: "rgba(60,141,188,0.9)",
                                        strokeColor: "rgba(60,141,188,0.8)",
                                        pointColor: "#3b8bba",
                                        pointStrokeColor: "rgba(60,141,188,1)",
                                        pointHighlightFill: "#fff",
                                        pointHighlightStroke: "rgba(60,141,188,1)",
                                        borderColor: 'rgba(60, 141, 188, 0.7)',
                                        backgroundColor: 'rgba(44, 152, 214, 0.5)',
                                        pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                                        pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                                        pointBorderWidth: 1,
                                        data: []
                                    }
                                ]
                            },
                            options: {
                                legend: {
                                    display: false
                                },
                                scales: {
                                    xAxes: [{
                                        display: true,
                                        ticks: {
                                            userCallback: function (dataLabel, index) {
                                                if (window.orderStatistics && window.orderStatistics.config.data.labels.length > 12) {
                                                    return index % 5 === 0 ? dataLabel : '';
                                                }
                                                return dataLabel;
                                            }
                                        }
                                    }],
                                    yAxes: [{
                                        display: true,
                                        ticks: {
                                            userCallback: function (dataLabel, index) {
                                                return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                            },
                                            min: 0
                                        }
                                    }]
                                },
                                showScale: true,
                                scaleShowGridLines: false,
                                scaleGridLineColor: "rgba(0,0,0,.05)",
                                scaleGridLineWidth: 1,
                                scaleShowHorizontalLines: true,
                                scaleShowVerticalLines: true,
                                bezierCurve: true,
                                pointDot: false,
                                pointDotRadius: 4,
                                pointDotStrokeWidth: 1,
                                pointHitDetectionRadius: 20,
                                datasetStroke: true,
                                datasetFill: true,
                                maintainAspectRatio: false,
                                responsive: true
                            }
                        };

                        function changeOsPeriod(period) {
                            var osLabels = [];
                            var osData = [];

                            for (var i = 0; i < data.length; i++) {
                                osLabels.push(data[i].date);
                                osData.push(data[i].value);
                            }

                            if (!window.orderStatistics) {
                                osConfig.data.labels = osLabels;
                                osConfig.data.datasets[0].data = osData;
                                osConfig.data.scales =
                                window.orderStatistics = new Chart(document.getElementById("@prefix-chart").getContext("2d"), osConfig);
                            } else {
                                window.orderStatistics.config.data.labels = osLabels;
                                window.orderStatistics.config.data.datasets[0].data = osData;
                                window.orderStatistics.update();
                            }
                            return true
                        }

                        $('#@(prefix)-box button[data-chart-role="toggle-chart"]').on('click', function () {
                            var period = $(this).attr('data-chart-period');
                            osCurrentPeriod = period;
                            changeOsPeriod(period);
                            $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeClass('bg-light-blue');
                            $(this).addClass('bg-light-blue');
                        });

                        @if (!hidePanel)
                {
                    <text>
                        $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                        </text>
                }
                        var csCurrentPeriod;

                        $('#@(prefix1)-box').on('click', 'button[data-widget="collapse"]', function () {
                            var collapsed = !$('#@(prefix1)-box').hasClass('collapsed-box');
                            saveUserPreferences('@(Url.Action("SavePreference", "Preferences"))', '@hidePanelAttributeName', collapsed);
                            if (!collapsed) {
                                $('#@(prefix1)-box button[data-chart-role="toggle-chart"]').removeAttr('disabled');
                                if (!csCurrentPeriod) {
                                    $('#@(prefix1)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                                }
                            } else {
                                $('#@(prefix1)-box button[data-chart-role="toggle-chart"]').attr('disabled', 'disabled');
                            }
                        });
                        var csConfig = {
                            type: 'bar',
                            data: {
                                labels: [],
                                datasets: [
                                    {
                                        label: "xyz",
                                        fillColor: "rgba(60,141,188,0.9)",
                                        strokeColor: "rgba(60,141,188,0.8)",
                                        pointColor: "#00a65a",
                                        pointStrokeColor: "rgba(0,166,90,1)",
                                        pointHighlightFill: "#fff",
                                        pointHighlightStroke: "rgba(0,166,90,1)",
                                        borderColor: 'rgba(0,166,90, 1)',
                                        backgroundColor: 'rgba(0,166,90,0.5)',
                                        pointBorderColor: 'rgba(0,166,90,0.7)',
                                        pointBackgroundColor: 'rgba(0,166,90,0.2)',
                                        pointBorderWidth: 1,
                                        data: []
                                    }
                                ]
                            },
                            options: {
                                legend: {
                                    display: false
                                },
                                scales: {
                                    xAxes: [{
                                        display: true,
                                        ticks: {
                                            userCallback: function (dataLabel, index) {
                                                if (window.customerStatistics && window.customerStatistics.config.data.labels.length > 12) {
                                                    return index % 5 === 0 ? dataLabel : '';
                                                }
                                                return dataLabel;
                                            }
                                        }
                                    }],
                                    yAxes: [{
                                        display: true,
                                        ticks: {
                                            userCallback: function (dataLabel, index) {
                                                return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                            },
                                            min: 0
                                        }
                                    }]
                                },
                                showScale: true,
                                scaleShowGridLines: false,
                                scaleGridLineColor: "rgba(0,0,0,.05)",
                                scaleGridLineWidth: 1,
                                scaleShowHorizontalLines: true,
                                scaleShowVerticalLines: true,
                                bezierCurve: true,
                                pointDot: false,
                                pointDotRadius: 4,
                                pointDotStrokeWidth: 1,
                                pointHitDetectionRadius: 20,
                                datasetStroke: true,
                                datasetFill: true,
                                maintainAspectRatio: false,
                                responsive: true
                            },
                        }
                        function changeCsPeriod(period) {
                            var csLabels = [];
                            var csData = [];


                            for (var i = 0; i < data1.length; i++) {
                                csLabels.push(data1[i].date);
                                csData.push(data1[i].value);
                            }

                            if (!window.customerStatistics) {
                                csConfig.data.labels = csLabels;
                                csConfig.data.datasets[0].data = csData;
                                csConfig.data.scales =
                                window.customerStatistics = new Chart(document.getElementById("@prefix1-chart").getContext("2d"), csConfig);
                            } else {
                                window.customerStatistics.config.data.labels = csLabels;
                                window.customerStatistics.config.data.datasets[0].data = csData;
                                window.customerStatistics.update();
                            }
                        }


                        $('#@(prefix1)-box button[data-chart-role="toggle-chart"]').on('click', function () {
                            var period = $(this).attr('data-chart-period');
                            csCurrentPeriod = period;
                            changeCsPeriod(period);
                            $('#@(prefix1)-box button[data-chart-role="toggle-chart"]').removeClass('bg-light-blue');
                            $(this).addClass('bg-light-blue');
                        });

                        @if (!hidePanel)
                {
                    <text>
                        $('#@(prefix1)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                        </text>
                }
                    });
                </script>*@
            <script src="https://www.gstatic.com/firebasejs/4.1.3/firebase.js"></script>
            <script>
                var config = {
                    apiKey: "AIzaSyDIXCGE7OJgPvn8zO_jqKRkSHpziBbB2z4",
                    authDomain: "smarthome.firebaseapp.com",
                    databaseURL: "https://smarthome-46be4.firebaseio.com",
                    messagingSenderId: "994315037246",
                    storageBucket: "smarthome-46be4.appspot.com"
                };
                firebase.initializeApp(config);

                @*var customerMeterDetails = firebase.database().ref('smartmeterslogs/@Model.meterId/');
            customerMeterDetails.on('value', function (snapshot) {
                alert(' Refresh Values');
            })*@;
            </script>
        </div>

    </div>
